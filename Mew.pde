import ddf.minim.*;

Minim minim;
AudioPlayer player;

float DefaultScale = 1.0;
float FR = 33;
float SampleRate = 4;

boolean running = true;
boolean DEBUGGING = false;
boolean SoundOn = true;

float t = 0;
float scale = DefaultScale;
color transparent = color(0, 0, 0, 0);
color black = color(58, 28, 36);
color pink = color(245, 218, 223);
color blue = color(109, 156, 202);
color purple = color(191, 152, 171);
color white = color(255, 255, 255);
ArrayList<PVector> points = new ArrayList<PVector>();
ArrayList<Integer> lineColor = new ArrayList<Integer>();
ArrayList<Integer> strokes = new ArrayList<Integer>();

void setup()
{
  fullScreen(P2D);
  //size(800, 800, P2D);
  background(0);
  noFill();
  smooth();
  frameRate(FR);
  
  minim = new Minim(this);
  player = minim.loadFile("Pokemon Theme.mp3");
  if(SoundOn)
    player.loop();
}

void keyPressed() {
  if(key == ' ')
    running = !running;
  if(key == 'r')
    reset();
}

void reset()
{
  frameCount = -1;
  t = 0;
  lineColor.clear();
  strokes.clear();
  points.clear();
  minim.stop();
  minim = new Minim(this);
  if(SoundOn)
    player.loop();
  scale = DefaultScale;
}

float updateT(float T)
{
  T += 0.008;
  
  if(T >= 304.736) { //END
    strokes.add(1);
    lineColor.add(color(0 , 0, 0));
    return 100 * PI;
  }
  if(T >= 301.842 && T < 304.736) { //RIGHT EYEBROW
    strokes.add(2);
    lineColor.add(black);
    return T + 0.012;
  }
  if(T >= 293.286 && T < 301.842) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 301.842;
  }
  if(T >= 289.429 && T < 293.286) { //LEFT EYEBROW
    strokes.add(2);
    lineColor.add(black);
    return T + 0.012;
  }
  if(T >= 282.713 && T < 289.429) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 289.429;
  }
  if(T >= 279.539 && T < 282.713) { //TAIL 4
    strokes.add(4);
    lineColor.add(purple);
    return T;
  }
  if(T >= 270.179 && T < 279.539) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 279.539;
  }
  if(T >= 267.061 && T < 270.179) { //TAIL 3
    strokes.add(4);
    lineColor.add(purple);
    return T;
  }
  if(T >= 254.508 && T < 267.061) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 267.061;
  }
  if(T >= 251.382 && T < 254.508) { //LEFT FOOT 3
    strokes.add(5);
    lineColor.add(pink);
    return T - 0.002;
  }
  if(T >= 244.982 && T < 251.382) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 251.382;
  }
  if(T >= 241.892 && T < 244.982) { //RIGHT FOOT 3
    strokes.add(4);
    lineColor.add(pink);
    return T;
  }
  if(T >= 229.279 && T < 241.892) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 241.892;
  }
  if(T >= 226.297 && T < 229.279) { //RIGHT FOOT 2
    strokes.add(5);
    lineColor.add(pink);
    return T + 0.008;
  }
  if(T >= 216.806 && T < 226.297) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 226.297;
  }
  if(T >= 213.744 && T < 216.806) { //RIGHT FOOT 1
    strokes.add(5);
    lineColor.add(pink);
    return T;
  }
  if(T >= 204.069 && T < 213.744) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 213.744;
  }
  if(T >= 201.175 && T < 204.069) { //BELLY
    strokes.add(5);
    lineColor.add(pink);
    return T;
  }
  if(T >= 191.652 && T < 201.175) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 201.175;
  }
  if(T >= 188.478 && T < 191.652) { //LEFT FOOT 2
    strokes.add(5);
    lineColor.add(pink);
    return T;
  }
  if(T >= 179.128 && T < 188.478) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 188.514;
  }
  if(T >= 176.010 && T < 179.128) { //LEFT FOOT 1
    strokes.add(5);
    lineColor.add(pink);
    return T + 0.004;
  }
  if(T >= 169.530 && T < 176.010) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 176.010;
  }
  if(T >= 166.544 && T < 169.530) { //RIGHT BODY
    strokes.add(5);
    lineColor.add(pink);
    return T;
  }
  if(T >= 157.086 && T < 166.544) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 166.544;
  }
  if(T >= 153.912 && T < 157.086) { //RIGHT ARM
    strokes.add(4);
    lineColor.add(pink);
    return T;
  }
  if(T >= 144.502 && T < 153.912) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 153.912;
  }
  if(T >= 141.440 && T < 144.502) { //LEFT ARM
    strokes.add(4);
    lineColor.add(pink);
    return T;
  }
  if(T >= 131.938 && T < 141.440) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 141.440;
  }
  if(T >= 128.700 && T < 131.938) { //TAIL 2
    strokes.add(5);
    lineColor.add(purple);
    return T + 0.004;
  }
  if(T >= 116.410 && T < 128.700) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 128.700;
  }
  if(T >= 113.139 && T < 116.410) { //TAIL 1
    strokes.add(5);
    lineColor.add(purple);
    return T;
  }
  if(T >= 106.803 && T < 113.139) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 113.139;
  }
  if(T >= 103.802 && T < 106.803) { //RIGHT EAR
    strokes.add(3);
    lineColor.add(pink);
    return T + 0.004;
  }
  if(T >= 91.157 && T < 103.802) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 103.802;
  }
  if(T >= 88.036 && T < 91.157) { //HEAD AND LEFT EAR
    strokes.add(3);
    lineColor.add(pink);
    return T - 0.002;
  }
  if(T >= 78.720 && T < 88.036) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 88.036;
  }
  if(T >= 75.479 && T < 78.720) { //RIGHT CHEEK
    strokes.add(3);
    lineColor.add(pink);
    return T;
  }
  if(T >= 65.931 && T < 75.479) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 75.479;
  }
  if(T >= 62.907 && T < 65.931) { //LEFT CHEEK
    strokes.add(3);
    lineColor.add(pink);
    return T;
  }
  if(T >= 56.547 && T < 62.907) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 62.907;
  }
  if(T >= 53.396 && T < 56.547) { //MOUTH
    strokes.add(3);
    lineColor.add(pink);
    return T;
  }
  if(T >= 42.981 && T < 53.396) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 53.396;
  }
  if(T >= 37.790 && T < 42.981) { //RIGHT EYEBALL
    strokes.add(1);
    if(T < 41.181)
      lineColor.add(blue);
    else
      lineColor.add(white);
    return T;
  }
  if(T >= 31.410 && T < 37.790) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 37.790;
  }
  if(T >= 25.227 && T < 31.410) { //LEFT EYEBALL
    strokes.add(1);
    if(T >= 25.850 && T < 27.146)
      T = 27.146;
    if(T < 28.489)
      lineColor.add(blue);
    else if(T < 30.065)
      lineColor.add(white);
    else
      lineColor.add(blue);
      
    return T;
  }
  if(T >= 18.847 && T < 25.227) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 25.227;
  }
  if(T >= 12.624 && T < 18.847) { //RIGHT EYE
    strokes.add(3);
    lineColor.add(black);
    return T + 0.004;
  }
  if(T >= 6.220 && T < 12.624) { //SKIP
    strokes.add(1);
    lineColor.add(white);
    return 12.624;
  }
  if(T >= 0 && T < 6.220) { //LEFT EYE
    strokes.add(3);
    lineColor.add(black);
    return T + 0.004;
  }
  else { //BODY
    strokes.add(4);
    lineColor.add(pink);
  }
  return T;
}

void draw()
{ 
  if(frameCount < 13) return;
  if(t <= 100 * PI && running)
  {
    for(int z = 0; z<SampleRate; z++) {
      t = updateT(t);
      if(x(t) == 0 && y(t) == 0) continue;
      points.add(new PVector(x(t), -y(t)));
      if(DEBUGGING)
        print(t + "\n");
    }
  } else {
    if(!DEBUGGING)
      scale += 0.001;
  }
  
  translate(width/2, height/2);
  background(0);
  
  beginShape();
  for(int i = 0; i < points.size(); i++)
  {
    strokeWeight(strokes.get(i));
    stroke(lineColor.get(i));
    point(points.get(i).x * scale, points.get(i).y * scale);
  }
  endShape();
}

float sgn(float x)
{
  if(x == 0) return 0;
  else if(x > 0) return 1;
  else return -1;
}

float theta(float x)
{
  if(x == 0) return 0.5;
  else if(x > 0) return 1;
  else return 0;
}

float SIN(float x)
{
  return sin(x);
}

float x(float t)
{
  return ((8*sin(t + 11.0/7) + 3.0/5*sin(2*t + 11.0/7) + 34.0/33*sin(3*t + 11.0/7) + 1.0/7*sin(4*t + 8.0/5) + 403.0/5)*theta(99*PI -t)*theta(t - 95*PI) + (65.0/14*sin(t + 11.0/7) + 2.0/5*sin(2*t + 33.0/7) + 1.0/2*sin(3*t + 11.0/7) + 1.0/18*sin(4*t + 47.0/10) + 115.0/14)*theta(95*PI -t)*theta(t - 91*PI) + (-1.0/12*sin(16.0/11 - 21*t) - 1.0/7*sin(17.0/11 - 19*t) - 3.0/5*sin(14.0/9 - 18*t) - 4.0/7*sin(11.0/7 - 16*t) - 1.0/39*sin(4.0/3 - 15*t) - 7.0/11*sin(11.0/7 - 14*t) - 7.0/5*sin(14.0/9 - 12*t) - 1.0/8*sin(3.0/2 - 11*t) - 13.0/8*sin(11.0/7 - 10*t) - 12.0/5*sin(11.0/7 - 8*t) - 3.0/8*sin(17.0/11 - 7*t) - 35.0/8*sin(14.0/9 - 6*t) - 82.0/9*sin(11.0/7 - 4*t) - 573.0/10*sin(11.0/7 - 2*t) + 87.0/8*sin(t + 33.0/7) + 1.0/6*sin(3*t + 15.0/8) + 8.0/9*sin(5*t + 33.0/7) + 1.0/11*sin(9*t + 5.0/3) + 1.0/10*sin(13*t + 20.0/13) + 1.0/18*sin(17*t + 15.0/11) + 2.0/11*sin(20*t + 61.0/13) + 1031.0/6)*theta(91*PI -t)*theta(t - 87*PI) + (-1.0/11*sin(26.0/17 - 17*t) - 1.0/2*sin(17.0/11 - 16*t) - 11.0/13*sin(17.0/11 - 14*t) - 1.0/13*sin(17.0/11 - 13*t) - 3.0/4*sin(14.0/9 - 12*t) - 1.0/12*sin(10.0/7 - 11*t) - 17.0/10*sin(14.0/9 - 10*t) - 13.0/7*sin(11.0/7 - 8*t) - 2.0/11*sin(19.0/13 - 7*t) - 42.0/11*sin(11.0/7 - 6*t) - 44.0/29*sin(17.0/11 - 5*t) - 43.0/5*sin(11.0/7 - 4*t) - 361.0/7*sin(11.0/7 - 2*t) + 109.0/9*sin(t + 11.0/7) + 13.0/10*sin(3*t + 47.0/10) + 1.0/19*sin(9*t + 16.0/11) + 1.0/5*sin(15*t + 8.0/5) + 639.0/4)*theta(87*PI -t)*theta(t - 83*PI) + (-11.0/17*sin(19.0/13 - 16*t) - 3.0/5*sin(20.0/13 - 14*t) - 2.0/11*sin(8.0/7 - 13*t) - 115.0/7*sin(29.0/19 - 2*t) - 4386.0/41*sin(14.0/9 -t) + 77.0/8*sin(3*t + 8.0/5) + 9.0/7*sin(4*t + 35.0/8) + 73.0/12*sin(5*t + 8.0/5) + 80.0/23*sin(6*t + 23.0/14) + 113.0/17*sin(7*t + 28.0/17) + 3.0/7*sin(8*t + 43.0/16) + 39.0/8*sin(9*t + 13.0/8) + 7.0/8*sin(10*t + 7.0/4) + 4.0/9*sin(11*t + 69.0/34) + 23.0/13*sin(12*t + 5.0/3) +sin(15*t + 5.0/3) + 1.0/11*sin(17*t + 3.0/4) + 7.0/13*sin(18*t + 22.0/13) + 1.0/3*sin(19*t + 32.0/7) + 2.0/5*sin(20*t + 28.0/17) + 5.0/9*sin(21*t + 22.0/13) + 1.0/4*sin(22*t + 13.0/3) + 1.0/2*sin(23*t + 9.0/5) + 1.0/3*sin(24*t + 5.0/3) + 1.0/9*sin(25*t + 13.0/3) + 3.0/7*sin(26*t + 29.0/15) + 1.0/6*sin(27*t + 43.0/22) - 650.0/7)*theta(83*PI -t)*theta(t - 79*PI) + (-3.0/11*sin(17.0/11 - 14*t) - 1.0/12*sin(10.0/7 - 13*t) - 4.0/9*sin(14.0/9 - 12*t) - 1.0/33*sin(6.0/5 - 11*t) - 16.0/31*sin(14.0/9 - 10*t) - 2.0/5*sin(14.0/9 - 8*t) - 7.0/9*sin(11.0/7 - 6*t) - 35.0/13*sin(11.0/7 - 2*t) + 1179.0/16*sin(t + 11.0/7) + 52.0/9*sin(3*t + 11.0/7) + 13.0/11*sin(4*t + 33.0/7) + 11.0/8*sin(5*t + 11.0/7) + 2.0/5*sin(7*t + 11.0/7) + 2.0/11*sin(9*t + 14.0/9) + 1.0/17*sin(15*t + 14.0/9) + 1.0/8*sin(16*t + 14.0/3) + 3717.0/22)*theta(79*PI -t)*theta(t - 75*PI) + (-2.0/11*sin(14.0/9 - 14*t) - 1.0/5*sin(14.0/9 - 12*t) - 2.0/9*sin(11.0/7 - 10*t) - 1.0/15*sin(3.0/2 - 9*t) - 5.0/8*sin(11.0/7 - 8*t) - 1.0/42*sin(13.0/10 - 7*t) - 39.0/40*sin(11.0/7 - 6*t) - 19.0/7*sin(11.0/7 - 4*t) - 67.0/8*sin(11.0/7 - 2*t) - 131.0/11*sin(11.0/7 -t) + 10.0/7*sin(3*t + 11.0/7) + 2.0/7*sin(5*t + 17.0/11) + 1.0/36*sin(13*t + 13.0/8) + 461.0/2)*theta(75*PI -t)*theta(t - 71*PI) + (-12.0/25*sin(14.0/9 - 22*t) - 5.0/11*sin(14.0/9 - 20*t) - 1.0/17*sin(3.0/2 - 12*t) - 2.0/9*sin(3.0/2 - 11*t) -sin(14.0/9 - 9*t) - 111.0/10*sin(11.0/7 - 2*t) + 701.0/8*sin(t + 11.0/7) + 31.0/9*sin(3*t + 47.0/10) + 81.0/11*sin(4*t + 33.0/7) + 74.0/13*sin(5*t + 33.0/7) + 38.0/13*sin(6*t + 33.0/7) + 19.0/5*sin(7*t + 33.0/7) + 1.0/36*sin(8*t + 37.0/9) + 9.0/13*sin(10*t + 14.0/9) + 9.0/17*sin(13*t + 33.0/7) + 9.0/13*sin(14*t + 47.0/10) + 3.0/10*sin(15*t + 61.0/13) + 4.0/5*sin(16*t + 47.0/10) + 1.0/15*sin(17*t + 8.0/5) + 7.0/10*sin(18*t + 33.0/7) + 4.0/9*sin(19*t + 19.0/12) + 3.0/8*sin(21*t + 19.0/12) + 1.0/6*sin(23*t + 18.0/11) + 6.0/13*sin(24*t + 33.0/7) + 1264.0/9)*theta(71*PI -t)*theta(t - 67*PI) + (-4.0/9*sin(11.0/7 - 10*t) - 1.0/37*sin(23.0/17 - 9*t) - 26.0/17*sin(11.0/7 - 6*t) - 19.0/8*sin(11.0/7 - 4*t) - 41.0/4*sin(11.0/7 - 2*t) + 377.0/9*sin(t + 11.0/7) + 35.0/11*sin(3*t + 11.0/7) + 1.0/12*sin(5*t + 13.0/8) + 1.0/11*sin(7*t + 20.0/13) + 5.0/6*sin(8*t + 33.0/7) + 1.0/8*sin(11*t + 11.0/7) + 1.0/5*sin(12*t + 33.0/7) + 1.0/12*sin(13*t + 23.0/15) + 3.0/14*sin(14*t + 33.0/7) + 373.0/7)*theta(67*PI -t)*theta(t - 63*PI) + (1753.0/24*sin(t + 11.0/7) + 29.0/12*sin(2*t + 14.0/9) + 57.0/8*sin(3*t + 11.0/7) + 40.0/39*sin(4*t + 14.0/9) + 25.0/11*sin(5*t + 11.0/7) + 7.0/12*sin(6*t + 11.0/7) + 15.0/14*sin(7*t + 14.0/9) + 1.0/3*sin(8*t + 14.0/9) + 2.0/3*sin(9*t + 11.0/7) + 1.0/4*sin(10*t + 11.0/7) + 2.0/5*sin(11*t + 14.0/9) + 1.0/6*sin(12*t + 17.0/11) + 4.0/15*sin(13*t + 14.0/9) + 1.0/8*sin(14*t + 8.0/5) + 2.0/11*sin(15*t + 17.0/11) + 1.0/8*sin(16*t + 17.0/11) + 1.0/8*sin(17*t + 17.0/11) + 1.0/10*sin(18*t + 23.0/15) + 1.0/9*sin(19*t + 14.0/9) - 953.0/7)*theta(63*PI -t)*theta(t - 59*PI) + (155.0/8*sin(t + 11.0/7) + 109.0/18*sin(2*t + 11.0/7) + 1.0/5*sin(3*t + 14.0/3) + 31.0/14*sin(4*t + 11.0/7) + 1.0/3*sin(5*t + 33.0/7) + 9.0/8*sin(6*t + 11.0/7) + 1.0/5*sin(7*t + 47.0/10) + 7.0/12*sin(8*t + 11.0/7) + 1.0/22*sin(9*t + 61.0/13) + 3.0/10*sin(10*t + 11.0/7) + 1.0/51*sin(11*t + 19.0/11) + 2.0/11*sin(12*t + 11.0/7) + 1.0/38*sin(13*t + 13.0/8) + 1.0/8*sin(14*t + 8.0/5) + 1.0/46*sin(15*t + 5.0/3) + 1.0/10*sin(16*t + 19.0/12) + 1.0/12*sin(18*t + 19.0/12) - 1457.0/7)*theta(59*PI -t)*theta(t - 55*PI) + (-1.0/15*sin(9.0/7 - 5*t) - 19.0/8*sin(14.0/9 - 4*t) - 17.0/8*sin(20.0/13 - 3*t) - 35.0/3*sin(14.0/9 - 2*t) + 9.0/13*sin(t + 23.0/15) + 2.0/5*sin(6*t + 33.0/7) + 5.0/12*sin(7*t + 8.0/5) + 1.0/37*sin(8*t + 21.0/11) + 2.0/9*sin(9*t + 21.0/13) + 1.0/6*sin(10*t + 23.0/14) + 1.0/6*sin(11*t + 5.0/3) + 1.0/5*sin(12*t + 18.0/11) + 1.0/9*sin(13*t + 23.0/14) + 1.0/25*sin(14*t + 12.0/7) + 1.0/16*sin(15*t + 18.0/11) + 1.0/7*sin(16*t + 27.0/16) + 1.0/9*sin(17*t + 5.0/3) + 1.0/13*sin(18*t + 12.0/7) + 1.0/18*sin(19*t + 5.0/3) + 1.0/35*sin(20*t + 13.0/8) + 761.0/8)*theta(55*PI -t)*theta(t - 51*PI) + (-1.0/7*sin(11.0/7 - 25*t) + 106.0/7*sin(t + 11.0/7) + 323.0/13*sin(2*t + 33.0/7) + 29.0/5*sin(3*t + 47.0/10) + 3.0/2*sin(4*t + 33.0/7) + 16.0/13*sin(5*t + 33.0/7) + 6.0/5*sin(6*t + 47.0/10) + 9.0/7*sin(7*t + 33.0/7) + 1.0/6*sin(8*t + 32.0/7) + 24.0/11*sin(9*t + 33.0/7) + 2.0/9*sin(10*t + 61.0/13) + 10.0/13*sin(11*t + 17.0/11) + 3.0/8*sin(12*t + 11.0/7) + 25.0/17*sin(13*t + 47.0/10) + 11.0/9*sin(14*t + 47.0/10) + 2.0/5*sin(15*t + 11.0/7) + 7.0/10*sin(16*t + 14.0/9) + 1.0/9*sin(17*t + 17.0/11) + 3.0/5*sin(18*t + 47.0/10) + 2.0/7*sin(19*t + 51.0/11) + 1.0/11*sin(20*t + 65.0/14) + 1.0/17*sin(21*t + 75.0/16) + 2.0/11*sin(22*t + 14.0/3) + 1.0/16*sin(23*t + 14.0/3) + 1.0/12*sin(24*t + 14.0/9) + 1209.0/11)*theta(51*PI -t)*theta(t - 47*PI) + (-2.0/9*sin(3.0/2 - 32*t) - 1.0/12*sin(20.0/13 - 31*t) - 4.0/11*sin(38.0/25 - 29*t) - 3.0/11*sin(37.0/25 - 26*t) - 4.0/7*sin(3.0/2 - 25*t) - 1.0/4*sin(26.0/17 - 23*t) - 3.0/13*sin(13.0/9 - 22*t) - 2.0/5*sin(23.0/15 - 20*t) - 5.0/11*sin(23.0/15 - 17*t) - 1.0/5*sin(3.0/2 - 16*t) - 1.0/9*sin(14.0/9 - 14*t) - 3.0/7*sin(23.0/15 - 12*t) - 7.0/10*sin(17.0/11 - 11*t) - 24.0/23*sin(14.0/9 - 7*t) - 7.0/9*sin(14.0/9 - 6*t) - 95.0/4*sin(11.0/7 - 3*t) + 29.0/8*sin(t + 33.0/7) + 169.0/17*sin(2*t + 11.0/7) + 303.0/16*sin(4*t + 11.0/7) + 43.0/5*sin(5*t + 19.0/12) + 2.0/5*sin(8*t + 47.0/10) + 7.0/3*sin(9*t + 19.0/12) + 21.0/13*sin(10*t + 8.0/5) + 14.0/11*sin(13*t + 8.0/5) + 94.0/93*sin(15*t + 8.0/5) +sin(18*t + 13.0/8) + 1.0/10*sin(19*t + 3.0/2) + 7.0/13*sin(21*t + 13.0/8) + 18.0/19*sin(24*t + 13.0/8) + 7.0/10*sin(27*t + 18.0/11) + 1.0/15*sin(28*t + 18.0/11) + 8.0/17*sin(30*t + 18.0/11) + 2.0/5*sin(33*t + 28.0/17) - 569.0/10)*theta(47*PI -t)*theta(t - 43*PI) + (-1.0/9*sin(10.0/7 - 11*t) + 578.0/7*sin(t + 11.0/7) + 1761.0/80*sin(2*t + 14.0/9) + 11.0/6*sin(3*t + 15.0/11) + 87.0/13*sin(4*t + 14.0/9) + 1.0/2*sin(5*t + 25.0/17) + 50.0/17*sin(6*t + 11.0/7) + 6.0/11*sin(7*t + 29.0/19) + 7.0/5*sin(8*t + 3.0/2) + 4.0/11*sin(9*t + 9.0/7) + 52.0/51*sin(10*t + 29.0/19) + 6.0/7*sin(12*t + 11.0/7) + 2.0/13*sin(13*t + 7.0/5) + 5.0/9*sin(14*t + 16.0/11) + 1.0/7*sin(15*t + 9.0/8) + 6.0/17*sin(16*t + 16.0/11) + 1.0/10*sin(17*t + 3.0/2) + 1.0/5*sin(18*t + 17.0/11) + 1.0/6*sin(19*t + 19.0/13) + 3.0/11*sin(20*t + 16.0/11) + 1.0/23*sin(21*t + 3.0/5) - 849.0/5)*theta(43*PI -t)*theta(t - 39*PI) + (-5.0/9*sin(3.0/2 - 23*t) - 1.0/24*sin(34.0/33 - 22*t) - 2.0/11*sin(16.0/11 - 21*t) - 43.0/42*sin(3.0/2 - 17*t) - 1.0/6*sin(14.0/11 - 16*t) - 63.0/31*sin(14.0/9 - 11*t) - 28.0/17*sin(3.0/2 - 10*t) - 193.0/48*sin(14.0/9 - 9*t) - 4.0/5*sin(10.0/7 - 7*t) - 6*sin(17.0/11 - 4*t) - 1379.0/20*sin(11.0/7 - 3*t) + 103.0/11*sin(t + 8.0/5) + 71.0/11*sin(2*t + 14.0/9) + 29.0/9*sin(5*t + 47.0/10) + 40.0/11*sin(6*t + 11.0/7) + 16.0/9*sin(8*t + 11.0/7) + 9.0/7*sin(12*t + 19.0/12) + 1.0/10*sin(13*t + 47.0/10) + 12.0/13*sin(14*t + 17.0/11) + 2.0/3*sin(15*t + 47.0/10) + 3.0/8*sin(18*t + 11.0/7) + 1.0/24*sin(19*t + 28.0/19) + 7.0/12*sin(20*t + 11.0/7) + 1.0/11*sin(24*t + 23.0/17) - 759.0/5)*theta(39*PI -t)*theta(t - 35*PI) + (-1.0/8*sin(14.0/9 - 14*t) - 1.0/5*sin(11.0/7 - 8*t) - 119.0/8*sin(11.0/7 - 2*t) + 149.0/8*sin(t + 11.0/7) + 1.0/8*sin(3*t + 22.0/13) + 7.0/15*sin(4*t + 47.0/10) + 13.0/11*sin(5*t + 11.0/7) + 4.0/3*sin(6*t + 33.0/7) + 1.0/50*sin(7*t + 14.0/3) + 3.0/7*sin(9*t + 11.0/7) + 3.0/7*sin(10*t + 33.0/7) + 1.0/13*sin(11*t + 47.0/10) + 1.0/6*sin(12*t + 33.0/7) + 1.0/4*sin(13*t + 11.0/7) + 1.0/9*sin(16*t + 33.0/7) + 1.0/8*sin(17*t + 11.0/7) + 1707.0/13)*theta(35*PI -t)*theta(t - 31*PI) + (-1.0/7*sin(7.0/5 - 13*t) - 1.0/7*sin(10.0/9 - 11*t) - 18.0/35*sin(21.0/16 - 5*t) + 557.0/7*sin(t + 11.0/7) + 101.0/9*sin(2*t + 17.0/11) + 3.0/2*sin(3*t + 13.0/8) + 101.0/17*sin(4*t + 14.0/9) + 15.0/11*sin(6*t + 8.0/5) + 13.0/10*sin(7*t + 26.0/17) + 1.0/7*sin(8*t + 10.0/11) + 1.0/2*sin(9*t + 23.0/14) + 5.0/7*sin(10*t + 17.0/11) + 3.0/4*sin(12*t + 21.0/13) + 6.0/17*sin(14*t + 7.0/5) + 1.0/7*sin(15*t + 23.0/14) + 1.0/8*sin(16*t + 3.0/2) + 1.0/24*sin(17*t + 1.0/2) - 197.0/33)*theta(31*PI -t)*theta(t - 27*PI) + (-1.0/5*sin(11.0/7 - 16*t) - 1.0/5*sin(11.0/7 - 14*t) - 2.0/7*sin(11.0/7 - 12*t) - 12.0/25*sin(11.0/7 - 10*t) - 5.0/6*sin(11.0/7 - 8*t) - 8.0/5*sin(11.0/7 - 6*t) - 28.0/11*sin(11.0/7 - 4*t) - 146.0/9*sin(11.0/7 - 2*t) + 81.0/4*sin(t + 11.0/7) + 2.0/11*sin(3*t + 37.0/25) + 11.0/15*sin(5*t + 11.0/7) + 1.0/5*sin(7*t + 23.0/15) + 1.0/8*sin(9*t + 16.0/11) + 1.0/11*sin(11*t + 19.0/13) + 1.0/7*sin(13*t + 14.0/9) + 1.0/25*sin(15*t + 22.0/15) + 2063.0/16)*theta(27*PI -t)*theta(t - 23*PI) + (-5.0/8*sin(11.0/7 - 5*t) - 1.0/5*sin(20.0/13 - 3*t) - 424.0/19*sin(11.0/7 -t) + 119.0/8*sin(2*t + 11.0/7) + 87.0/25*sin(4*t + 11.0/7) + 19.0/14*sin(6*t + 11.0/7) + 3.0/11*sin(7*t + 33.0/7) + 11.0/13*sin(8*t + 11.0/7) + 1.0/30*sin(9*t + 22.0/13) + 5.0/11*sin(10*t + 11.0/7) + 1.0/26*sin(11*t + 50.0/11) + 6.0/17*sin(12*t + 11.0/7) - 166.0/3)*theta(23*PI -t)*theta(t - 19*PI) + (-1.0/7*sin(14.0/9 - 4*t) + 663.0/14*sin(t + 11.0/7) + 5.0/4*sin(2*t + 14.0/9) + 29.0/9*sin(3*t + 11.0/7) + 3.0/2*sin(5*t + 11.0/7) + 1.0/18*sin(6*t + 19.0/12) + 3.0/5*sin(7*t + 11.0/7) + 1.0/14*sin(8*t + 8.0/5) + 4.0/9*sin(9*t + 14.0/9) + 1.0/16*sin(10*t + 8.0/5) + 1.0/3*sin(11*t + 11.0/7) + 1.0/4*sin(13*t + 14.0/9) + 323.0/10)*theta(19*PI -t)*theta(t - 15*PI) + (-1.0/3*sin(9.0/17 - 11*t) - 2.0/5*sin(9.0/7 - 7*t) - 3.0/5*sin(1.0/6 - 5*t) + 97.0/12*sin(t + 47.0/10) + 67.0/10*sin(2*t + 47.0/12) + 23.0/13*sin(3*t + 1.0/11) + 11.0/4*sin(4*t + 11.0/5) + 1.0/14*sin(6*t + 1.0/7) + 1.0/3*sin(8*t + 21.0/8) + 3.0/10*sin(9*t + 4.0/5) + 1.0/8*sin(10*t + 24.0/7) + 1.0/7*sin(12*t + 31.0/9) + 1.0/31*sin(13*t + 1.0/2) + 1.0/6*sin(14*t + 41.0/14) + 660.0/7)*theta(15*PI -t)*theta(t - 11*PI) + (-4.0/11*sin(4.0/9 - 9*t) - 1.0/7*sin(16.0/15 - 8*t) - 65.0/64*sin(10.0/11 - 5*t) - 263.0/25*sin(9.0/7 -t) + 33.0/4*sin(2*t + 381.0/95) + 18.0/7*sin(3*t + 2.0/3) + 13.0/10*sin(4*t + 9.0/4) + 8.0/9*sin(6*t + 29.0/11) + 5.0/16*sin(7*t + 5.0/9) + 4.0/9*sin(10*t + 98.0/33) + 3.0/11*sin(11*t + 1.0/21) + 1.0/16*sin(12*t + 60.0/13) - 41.0/7)*theta(11*PI -t)*theta(t - 7*PI) + (421.0/20*sin(t + 7.0/8) + 13.0/4*sin(2*t + 41.0/10) + 9.0/5*sin(3*t + 14.0/9) + 13.0/14*sin(4*t + 46.0/11) + 9.0/13*sin(5*t + 12.0/11) + 3.0/7*sin(6*t + 26.0/7) + 3.0/5*sin(7*t + 7.0/9) + 1457.0/14)*theta(7*PI -t)*theta(t - 3*PI) + (143.0/6*sin(t + 10.0/13) + 15.0/7*sin(2*t + 46.0/11) + 8.0/11*sin(3*t + 49.0/13) + 11.0/8*sin(4*t + 27.0/8) + 6.0/5*sin(5*t + 11.0/23) + 11.0/16*sin(6*t + 59.0/16) + 7.0/8*sin(7*t + 3.0/5) + 9.0/13*sin(8*t + 56.0/13) + 5.0/16*sin(9*t + 5.0/4) + 5.0/16*sin(10*t + 39.0/11) + 1.0/2*sin(11*t + 5.0/6) + 1.0/3*sin(12*t + 30.0/7) + 4.0/15*sin(13*t + 1) - 125.0/8)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}

float y(float t)
{
  return ((110.0/9*sin(t + 11.0/7) + 3.0/7*sin(2*t + 47.0/10) + 16.0/13*sin(3*t + 11.0/7) + 1.0/8*sin(4*t + 61.0/13) + 1249.0/9)*theta(99*PI -t)*theta(t - 95*PI) + (-1.0/32*sin(3.0/2 - 4*t) - 9.0/10*sin(11.0/7 - 3*t) - 2.0/9*sin(14.0/9 - 2*t) - 97.0/12*sin(11.0/7 -t) + 1309.0/9)*theta(95*PI -t)*theta(t - 91*PI) + (-1.0/5*sin(14.0/9 - 21*t) - 2.0/11*sin(14.0/9 - 19*t) - 6.0/19*sin(11.0/7 - 7*t) - 13.0/11*sin(20.0/13 - 5*t) - 2461.0/20*sin(11.0/7 -t) + 38.0/7*sin(2*t + 11.0/7) + 1.0/8*sin(3*t + 23.0/5) + 33.0/17*sin(4*t + 19.0/12) + 8.0/5*sin(6*t + 11.0/7) + 2.0/3*sin(8*t + 11.0/7) + 1.0/7*sin(9*t + 32.0/7) + 2.0/7*sin(10*t + 8.0/5) + 2.0/9*sin(11*t + 17.0/11) + 2.0/11*sin(12*t + 3.0/2) + 1.0/24*sin(13*t + 68.0/15) + 1.0/60*sin(14*t + 35.0/18) + 3.0/11*sin(15*t + 33.0/7) + 1.0/80*sin(16*t + 6.0/13) + 1.0/11*sin(17*t + 75.0/16) + 1.0/6*sin(18*t + 11.0/7) + 2.0/11*sin(20*t + 18.0/11) - 506.0/7)*theta(91*PI -t)*theta(t - 87*PI) + (-1.0/14*sin(13.0/9 - 14*t) - 1.0/5*sin(35.0/23 - 13*t) - 1.0/15*sin(7.0/5 - 9*t) - 6.0/7*sin(20.0/13 - 5*t) - 1606.0/15*sin(11.0/7 -t) + 7.0/3*sin(2*t + 33.0/7) + 14.0/11*sin(3*t + 21.0/13) + 22.0/7*sin(4*t + 11.0/7) + 29.0/14*sin(6*t + 11.0/7) + 5.0/8*sin(7*t + 14.0/3) + 9.0/13*sin(8*t + 21.0/13) + 2.0/9*sin(10*t + 19.0/13) + 2.0/11*sin(11*t + 61.0/13) + 3.0/11*sin(12*t + 28.0/17) + 1.0/12*sin(16*t + 47.0/10) - 117.0/2)*theta(87*PI -t)*theta(t - 83*PI) + (-2.0/7*sin(10.0/7 - 27*t) - 1.0/12*sin(2.0/5 - 26*t) - 4.0/15*sin(17.0/13 - 25*t) - 9.0/10*sin(3.0/2 - 15*t) - 7.0/8*sin(17.0/12 - 13*t) - 3.0/7*sin(13.0/10 - 12*t) - 4.0/7*sin(3.0/2 - 11*t) - 1001.0/12*sin(11.0/7 -t) + 327.0/14*sin(2*t + 11.0/7) + 65.0/9*sin(3*t + 75.0/16) + 131.0/9*sin(4*t + 13.0/8) + 19.0/5*sin(5*t + 27.0/16) + 23.0/5*sin(6*t + 13.0/8) + 32.0/21*sin(7*t + 7.0/4) + 31.0/10*sin(8*t + 18.0/11) + 2.0/11*sin(9*t + 13.0/3) + 5.0/8*sin(10*t + 3.0/2) + 1.0/5*sin(14*t + 11.0/9) + 4.0/9*sin(16*t + 17.0/11) + 1.0/10*sin(17*t + 75.0/16) + 5.0/13*sin(18*t + 9.0/5) + 1.0/3*sin(19*t + 147.0/73) + 9.0/13*sin(20*t + 19.0/11) + 1.0/8*sin(21*t + 43.0/10) + 1.0/2*sin(22*t + 16.0/9) + 1.0/10*sin(23*t + 63.0/25) + 1.0/10*sin(24*t + 17.0/12) - 1593.0/7)*theta(83*PI -t)*theta(t - 79*PI) + (-1.0/4*sin(14.0/9 - 15*t) - 1.0/10*sin(25.0/17 - 14*t) - 3.0/5*sin(14.0/9 - 13*t) - 3.0/11*sin(35.0/23 - 12*t) - 8.0/11*sin(14.0/9 - 11*t) - 2.0/7*sin(32.0/21 - 10*t) - 10.0/11*sin(14.0/9 - 9*t) - 16.0/9*sin(14.0/9 - 7*t) - 5.0/12*sin(20.0/13 - 6*t) - 19.0/6*sin(14.0/9 - 5*t) - 3.0/4*sin(17.0/11 - 4*t) - 29.0/4*sin(11.0/7 - 3*t) - 47.0/14*sin(11.0/7 - 2*t) - 793.0/20*sin(11.0/7 -t) + 1.0/9*sin(8*t + 23.0/15) + 1.0/19*sin(16*t + 10.0/7) - 1931.0/8)*theta(79*PI -t)*theta(t - 75*PI) + (-1.0/28*sin(11.0/7 - 8*t) - 1.0/14*sin(14.0/9 - 7*t) - 1.0/12*sin(20.0/13 - 5*t) - 13.0/11*sin(11.0/7 - 2*t) + 277.0/11*sin(t + 11.0/7) + 13.0/10*sin(3*t + 11.0/7) + 7.0/13*sin(4*t + 19.0/12) + 2.0/7*sin(6*t + 19.0/12) + 1.0/26*sin(9*t + 13.0/8) + 1.0/22*sin(10*t + 19.0/12) + 1.0/8*sin(11*t + 19.0/12) + 1.0/51*sin(12*t + 25.0/17) + 1.0/15*sin(13*t + 8.0/5) + 1.0/87*sin(14*t + 14.0/9) + 1.0/28*sin(15*t + 14.0/9) - 2050.0/7)*theta(75*PI -t)*theta(t - 71*PI) + (-1.0/29*sin(11.0/8 - 23*t) - 1.0/10*sin(14.0/9 - 21*t) + 576.0/11*sin(t + 33.0/7) + 139.0/7*sin(2*t + 11.0/7) + 49.0/8*sin(3*t + 11.0/7) + 145.0/13*sin(4*t + 11.0/7) + 124.0/41*sin(5*t + 14.0/9) + 26.0/7*sin(6*t + 11.0/7) + 19.0/9*sin(7*t + 33.0/7) + 3.0/11*sin(8*t + 13.0/8) + 5.0/3*sin(9*t + 33.0/7) + 1.0/5*sin(10*t + 23.0/14) + 1.0/4*sin(11*t + 33.0/7) + 9.0/13*sin(12*t + 11.0/7) + 1.0/7*sin(13*t + 26.0/17) + 9.0/13*sin(14*t + 14.0/9) + 1.0/11*sin(15*t + 35.0/23) + 3.0/13*sin(16*t + 14.0/9) + 4.0/13*sin(17*t + 61.0/13) + 1.0/9*sin(18*t + 14.0/3) + 1.0/5*sin(19*t + 33.0/7) + 2.0/13*sin(20*t + 11.0/7) + 3.0/11*sin(22*t + 11.0/7) + 1.0/5*sin(24*t + 14.0/9) - 6094.0/23)*theta(71*PI -t)*theta(t - 67*PI) + (693.0/19*sin(t + 11.0/7) + 337.0/26*sin(2*t + 11.0/7) + 78.0/77*sin(3*t + 14.0/9) + 13.0/5*sin(4*t + 11.0/7) + 15.0/13*sin(5*t + 11.0/7) + 6.0/5*sin(6*t + 11.0/7) + 1.0/6*sin(7*t + 19.0/12) + 5.0/6*sin(8*t + 11.0/7) + 1.0/16*sin(9*t + 13.0/8) + 9.0/17*sin(10*t + 11.0/7) + 1.0/52*sin(11*t + 9.0/2) + 1.0/3*sin(12*t + 11.0/7) + 2.0/7*sin(14*t + 11.0/7) - 1367.0/9)*theta(67*PI -t)*theta(t - 63*PI) + (-1.0/12*sin(14.0/9 - 18*t) - 1.0/10*sin(14.0/9 - 16*t) - 1.0/8*sin(11.0/7 - 12*t) - 3.0/8*sin(11.0/7 - 8*t) - 3.0/4*sin(11.0/7 - 6*t) - 33.0/20*sin(11.0/7 - 4*t) - 36.0/7*sin(11.0/7 - 2*t) + 369.0/13*sin(t + 11.0/7) + 13.0/3*sin(3*t + 11.0/7) + 21.0/11*sin(5*t + 11.0/7) + 16.0/15*sin(7*t + 11.0/7) + 8.0/15*sin(9*t + 11.0/7) + 2.0/7*sin(10*t + 33.0/7) + 4.0/9*sin(11*t + 11.0/7) + 4.0/11*sin(13*t + 14.0/9) + 1.0/14*sin(14*t + 47.0/10) + 2.0/7*sin(15*t + 14.0/9) + 1.0/4*sin(17*t + 11.0/7) + 1.0/6*sin(19*t + 11.0/7) - 439.0/2)*theta(63*PI -t)*theta(t - 59*PI) + (-1.0/59*sin(17.0/11 - 16*t) - 2.0/11*sin(11.0/7 - 4*t) - 31.0/9*sin(11.0/7 - 2*t) + 235.0/12*sin(t + 11.0/7) + 25.0/13*sin(3*t + 11.0/7) + 3.0/10*sin(5*t + 11.0/7) + 1.0/27*sin(6*t + 12.0/7) + 1.0/12*sin(7*t + 14.0/9) + 1.0/14*sin(8*t + 8.0/5) + 1.0/26*sin(9*t + 17.0/11) + 1.0/36*sin(10*t + 19.0/12) + 1.0/18*sin(11*t + 8.0/5) + 1.0/14*sin(13*t + 11.0/7) + 1.0/44*sin(14*t + 14.0/3) + 1.0/14*sin(15*t + 8.0/5) + 1.0/17*sin(17*t + 8.0/5) - 1346.0/5)*theta(59*PI -t)*theta(t - 55*PI) + (-1.0/6*sin(17.0/11 - 21*t) - 1.0/4*sin(20.0/13 - 19*t) - 1.0/39*sin(5.0/9 - 18*t) - 3.0/10*sin(23.0/15 - 17*t) - 1.0/67*sin(1.0/12 - 16*t) - 1.0/38*sin(11.0/12 - 14*t) - 1.0/2*sin(26.0/17 - 13*t) - 1.0/37*sin(5.0/9 - 12*t) - 5.0/7*sin(17.0/11 - 11*t) - 1.0/13*sin(19.0/13 - 10*t) - 10.0/9*sin(17.0/11 - 9*t) - 1.0/7*sin(11.0/9 - 8*t) - 18.0/11*sin(17.0/11 - 7*t) - 1.0/28*sin(5.0/12 - 6*t) - 17.0/6*sin(11.0/7 - 5*t) - 59.0/8*sin(14.0/9 - 3*t) - 536.0/7*sin(11.0/7 -t) + 12.0/13*sin(2*t + 10.0/7) + 5.0/11*sin(4*t + 3.0/2) + 3.0/8*sin(15*t + 47.0/10) - 733.0/7)*theta(55*PI -t)*theta(t - 51*PI) + (-9.0/11*sin(11.0/7 - 7*t) - 1069.0/31*sin(11.0/7 -t) + 161.0/10*sin(2*t + 11.0/7) + 2.0/5*sin(3*t + 13.0/9) + 68.0/9*sin(4*t + 11.0/7) + 7.0/9*sin(5*t + 14.0/9) + 16.0/17*sin(6*t + 11.0/7) + 17.0/10*sin(8*t + 11.0/7) + 25.0/13*sin(9*t + 33.0/7) + 48.0/47*sin(10*t + 47.0/10) + 5.0/12*sin(11*t + 75.0/16) + 7.0/6*sin(12*t + 11.0/7) + 5.0/16*sin(13*t + 26.0/17) + 8.0/11*sin(14*t + 14.0/9) + 1.0/6*sin(15*t + 19.0/12) + 2.0/7*sin(16*t + 47.0/10) + 7.0/10*sin(17*t + 47.0/10) + 1.0/37*sin(18*t + 9.0/2) + 1.0/9*sin(19*t + 3.0/2) + 2.0/5*sin(20*t + 14.0/9) + 2.0/11*sin(21*t + 38.0/25) + 1.0/8*sin(22*t + 20.0/13) + 2.0/7*sin(23*t + 47.0/10) + 1.0/19*sin(24*t + 9.0/2) + 1.0/7*sin(25*t + 33.0/7) - 107.0/10)*theta(51*PI -t)*theta(t - 47*PI) + (-1.0/7*sin(10.0/7 - 32*t) - 1.0/6*sin(14.0/9 - 31*t) - 3.0/7*sin(35.0/23 - 29*t) - 1.0/6*sin(16.0/11 - 28*t) - 3.0/7*sin(29.0/19 - 25*t) - 8.0/17*sin(3.0/2 - 24*t) - 11.0/10*sin(17.0/11 - 21*t) - 3.0/5*sin(38.0/25 - 16*t) - 10.0/9*sin(14.0/9 - 15*t) - 13.0/9*sin(11.0/7 - 13*t) - 26.0/11*sin(14.0/9 - 11*t) - 19.0/20*sin(20.0/13 - 10*t) - 29.0/4*sin(14.0/9 - 7*t) - 1.0/31*sin(2.0/5 - 6*t) - 192.0/7*sin(11.0/7 - 3*t) - 85.0/4*sin(11.0/7 - 2*t) - 411.0/5*sin(11.0/7 -t) + 2.0/5*sin(4*t + 7.0/5) + 18.0/19*sin(5*t + 33.0/7) + 7.0/4*sin(8*t + 19.0/12) + 2.0/7*sin(9*t + 17.0/10) + 6.0/7*sin(12*t + 11.0/7) + 8.0/7*sin(14*t + 19.0/12) + 1.0/7*sin(17*t + 65.0/14) + 1.0/13*sin(18*t + 19.0/12) + 3.0/10*sin(19*t + 47.0/10) + 1.0/8*sin(20*t + 11.0/7) + 3.0/10*sin(22*t + 19.0/12) + 3.0/11*sin(23*t + 5.0/3) + 1.0/11*sin(26*t + 11.0/7) + 1.0/9*sin(27*t + 27.0/16) + 3.0/14*sin(30*t + 8.0/5) + 1.0/53*sin(33*t + 21.0/10) - 464.0/11)*theta(47*PI -t)*theta(t - 43*PI) + (-2.0/13*sin(31.0/21 - 13*t) - 12.0/23*sin(17.0/11 - 11*t) - 16.0/15*sin(14.0/9 - 7*t) - 21.0/10*sin(11.0/7 - 5*t) - 656.0/9*sin(11.0/7 -t) + 91.0/5*sin(2*t + 19.0/12) + 63.0/8*sin(3*t + 47.0/10) + 10.0/3*sin(4*t + 11.0/7) + 19.0/13*sin(6*t + 14.0/9) + 5.0/11*sin(8*t + 13.0/8) + 11.0/17*sin(9*t + 79.0/17) + 3.0/8*sin(10*t + 21.0/13) + 2.0/5*sin(12*t + 23.0/15) + 3.0/10*sin(14*t + 11.0/7) + 1.0/6*sin(15*t + 14.0/3) + 1.0/5*sin(16*t + 8.0/5) + 1.0/4*sin(17*t + 33.0/7) + 1.0/17*sin(18*t + 15.0/11) + 1.0/6*sin(19*t + 37.0/8) + 1.0/7*sin(20*t + 18.0/11) + 2.0/9*sin(21*t + 14.0/3) + 1495.0/11)*theta(43*PI -t)*theta(t - 39*PI) + (-3.0/13*sin(16.0/11 - 24*t) - 5.0/13*sin(11.0/8 - 23*t) - 1.0/10*sin(7.0/6 - 22*t) - 16.0/31*sin(10.0/7 - 20*t) - 8.0/11*sin(10.0/7 - 19*t) - 6.0/11*sin(38.0/25 - 18*t) - 5.0/12*sin(28.0/19 - 17*t) - 6.0/7*sin(13.0/9 - 16*t) - 3.0/5*sin(37.0/25 - 15*t) - 5.0/6*sin(13.0/9 - 13*t) - 12.0/7*sin(26.0/17 - 12*t) - 11.0/9*sin(14.0/9 - 11*t) - 5.0/7*sin(19.0/13 - 10*t) - 14.0/11*sin(34.0/23 - 9*t) - 6.0/7*sin(14.0/9 - 8*t) - 57.0/17*sin(17.0/11 - 6*t) - 313.0/25*sin(14.0/9 - 5*t) - 35.0/6*sin(11.0/7 - 4*t) - 436.0/15*sin(11.0/7 - 2*t) + 639.0/7*sin(t + 11.0/7) + 14.0/9*sin(3*t + 35.0/23) + 11.0/3*sin(7*t + 19.0/12) + 2.0/11*sin(14*t + 47.0/10) + 1.0/7*sin(21*t + 13.0/8) + 873.0/4)*theta(39*PI -t)*theta(t - 35*PI) + (-1.0/18*sin(17.0/11 - 13*t) - 1.0/17*sin(26.0/17 - 12*t) - 6.0/11*sin(11.0/7 - 7*t) - 9.0/7*sin(11.0/7 - 6*t) + 389.0/21*sin(t + 33.0/7) + 103.0/9*sin(2*t + 33.0/7) + 21.0/10*sin(3*t + 47.0/10) + 1.0/5*sin(4*t + 75.0/16) + 5.0/11*sin(5*t + 33.0/7) + 1.0/9*sin(8*t + 47.0/10) + 1.0/14*sin(9*t + 37.0/8) + 2.0/5*sin(10*t + 47.0/10) + 3.0/11*sin(11*t + 33.0/7) + 1.0/6*sin(14*t + 47.0/10) + 1.0/6*sin(15*t + 61.0/13) + 1.0/14*sin(16*t + 14.0/3) + 1211.0/6)*theta(35*PI -t)*theta(t - 31*PI) + (-4.0/7*sin(17.0/11 - 12*t) - 13.0/11*sin(14.0/9 - 6*t) - 107.0/8*sin(11.0/7 - 2*t) + 138.0/7*sin(t + 11.0/7) + 21.0/5*sin(3*t + 21.0/13) + 231.0/23*sin(4*t + 47.0/10) + 23.0/9*sin(5*t + 19.0/12) + 19.0/15*sin(7*t + 65.0/14) + 7.0/10*sin(8*t + 51.0/11) + 10.0/19*sin(9*t + 3.0/2) + 5.0/6*sin(10*t + 47.0/10) + 1.0/9*sin(11*t + 13.0/6) + 4.0/9*sin(13*t + 20.0/13) + 1.0/2*sin(14*t + 37.0/8) + 3.0/10*sin(15*t + 23.0/5) + 1.0/30*sin(16*t + 37.0/8) + 16433.0/79)*theta(31*PI -t)*theta(t - 27*PI) + (448.0/9*sin(t + 11.0/7) + 28.0/5*sin(2*t + 11.0/7) + 51.0/14*sin(3*t + 11.0/7) + 2.0/3*sin(4*t + 11.0/7) + 13.0/11*sin(5*t + 11.0/7) + 8.0/11*sin(6*t + 8.0/5) + 7.0/15*sin(7*t + 8.0/5) + 4.0/13*sin(8*t + 21.0/13) + 3.0/8*sin(9*t + 19.0/12) + 1.0/6*sin(10*t + 18.0/11) + 3.0/10*sin(11*t + 21.0/13) + 1.0/7*sin(12*t + 28.0/17) + 2.0/9*sin(13*t + 8.0/5) + 1.0/10*sin(14*t + 11.0/7) + 1.0/6*sin(15*t + 19.0/12) + 1.0/15*sin(16*t + 18.0/11) + 879.0/8)*theta(27*PI -t)*theta(t - 23*PI) + (503.0/11*sin(t + 11.0/7) + 46.0/7*sin(2*t + 11.0/7) + 23.0/10*sin(3*t + 11.0/7) + 8.0/5*sin(4*t + 11.0/7) + 4.0/9*sin(5*t + 11.0/7) + 7.0/8*sin(6*t + 11.0/7) + 4.0/15*sin(7*t + 11.0/7) + 5.0/13*sin(8*t + 11.0/7) + 2.0/7*sin(9*t + 19.0/12) + 1.0/8*sin(10*t + 19.0/12) + 1.0/5*sin(11*t + 11.0/7) + 2.0/11*sin(12*t + 8.0/5) + 419.0/4)*theta(23*PI -t)*theta(t - 19*PI) + (-1.0/13*sin(14.0/9 - 5*t) - 50.0/9*sin(11.0/7 -t) + 159.0/10*sin(2*t + 11.0/7) + 5.0/14*sin(3*t + 17.0/11) + 31.0/15*sin(4*t + 11.0/7) + 17.0/12*sin(6*t + 11.0/7) + 5.0/7*sin(8*t + 11.0/7) + 1.0/10*sin(9*t + 61.0/13) + 4.0/11*sin(10*t + 11.0/7) + 1.0/25*sin(11*t + 47.0/10) + 3.0/11*sin(12*t + 11.0/7) + 1.0/31*sin(13*t + 21.0/13) + 831.0/16)*theta(19*PI -t)*theta(t - 15*PI) + (-1.0/9*sin(6.0/7 - 10*t) - 1.0/3*sin(48.0/49 - 9*t) - 23.0/6*sin(18.0/13 - 3*t) + 103.0/6*sin(t + 7.0/2) + 60.0/7*sin(2*t + 33.0/13) + 37.0/14*sin(4*t + 5.0/4) + 9.0/17*sin(5*t + 18.0/7) + 3.0/5*sin(6*t + 3.0/5) + 1.0/3*sin(7*t + 55.0/12) + 4.0/9*sin(8*t + 6.0/11) + 4.0/11*sin(11*t + 17.0/4) + 1.0/11*sin(12*t + 16.0/13) + 1.0/4*sin(13*t + 59.0/16) + 1.0/7*sin(14*t + 14.0/11) + 1607.0/13)*theta(15*PI -t)*theta(t - 11*PI) + (-3.0/7*sin(1.0/6 - 8*t) + 16*sin(t + 42.0/13) + 69.0/8*sin(2*t + 37.0/15) + 104.0/23*sin(3*t + 41.0/9) + 22.0/9*sin(4*t + 15.0/16) + 8.0/17*sin(5*t + 31.0/12) + 11.0/14*sin(6*t + 9.0/13) + 3.0/11*sin(7*t + 67.0/19) + 12.0/23*sin(9*t + 37.0/8) + 4.0/11*sin(10*t + 12.0/23) + 3.0/10*sin(11*t + 19.0/5) + 2.0/9*sin(12*t + 2.0/7) + 1201.0/10)*theta(11*PI -t)*theta(t - 7*PI) + (-20.0/11*sin(7.0/9 - 4*t) + 122.0/5*sin(t + 26.0/11) + 11.0/14*sin(2*t + 28.0/9) + 11.0/10*sin(3*t + 8.0/5) + 4.0/5*sin(5*t + 23.0/5) + 3.0/4*sin(6*t + 31.0/7) + 5.0/9*sin(7*t + 43.0/16) + 489.0/4)*theta(7*PI -t)*theta(t - 3*PI) + (-1.0/6*sin(3.0/4 - 9*t) - 11.0/7*sin(5.0/6 - 4*t) + 284.0/11*sin(t + 5.0/2) + 24.0/13*sin(2*t + 47.0/13) + 17.0/13*sin(3*t + 4.0/5) + 4.0/7*sin(5*t + 39.0/10) + 5.0/8*sin(6*t + 4) + 5.0/11*sin(7*t + 30.0/13) + 1.0/8*sin(8*t + 4.0/11) + 1.0/4*sin(10*t + 47.0/10) + 1.0/8*sin(11*t + 59.0/16) + 1.0/9*sin(12*t + 38.0/15) + 1.0/11*sin(13*t + 11.0/6) + 872.0/7)*theta(3*PI -t)*theta(t +PI))*theta(sqrt(sgn(sin(t/2))));
}
